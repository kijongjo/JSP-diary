모델1과 모델2?
JSP로 구성할 수 있는 웹 어플리케이션의 아키텍쳐이다.
크게 모델1과 모델2로 나뉜다. 

모델1과 모델2의 차이점? 
모델 1은 JSP가 결과의 출력 뿐만 아니라 요청에 대한 모든 로직을 처리 
모델 2는 결과의 출력만 담당

모델1이란? 
JSP파일내에서 뷰와 컨트롤러 모두 실행되어지는 구조이다.
웹 브라우저의 요청을 JSP가 직접 처리한다.
-웹 브라우저의 요청을 받은 JSP는 자바빈즈를 사용해서 웹 브라우저가 요청한 작업을 처리하고 그 결과를 클라이언트 측에 출력한다.-
출처 :https://haloworld.tistory.com/17 <-사진보기 
JSP 페이지에 비즈니스 로직을 처리하기 위한 코드와 웹 브라우저에 결과를 출력하는 코드가 섞인다는 것을 의미한다. 
장점 
-단순한 페이지 흐름으로 인한 개발기간 단축 
-이용 용이 
-중소형 프로젝트에 적합

단점
-웹 어플리케이션이 복잡해 질수록 유지보수가 어려움 
-디자이너와 개발자간의 활발한 의사소통이 필요함

모델2란?
컨트롤러를 통해  비즈니스 로지과 뷰가 분리된 형태이다. 
JSP에서는 뷰를 담당하고, 자바 클래스에서 비즈니스 로직을 담당. 뷰는 어떠한 처리로직도 포함하지 않는다.
-모델 2방식은 웹 브라우저의 요청을 하나의 서블릿으로 받는다. 서블릿은 웹 브라우저의 요청에 알맞게 처리한 후 그 결과를 보여줄 
JSP 페이지로 포워딩한다. 포워딩을 통해 요청 흐름을 받은 JSP 페이지는 결과화면을 클라이언트에 전송한다.-


특징
모델2 구조의 특징은 웹 브라우저의 모든 요청을 단일 진입점, 즉 하나의 서블릿에서 처리한다는 점이다. 
하나의 서블릿이 웹 브라우저의 모든 요청을 받기 때문에, 서블릿은 웹 브라우저의 요청을 구분하는 방법이 필요하다 .-
서블릿은 웹 브라우저의 요청을 처리한 후 웹 브라우저에 보이게 될 응답화면을 생성할 JSP를 선택한다.


장점
-비즈니스 로직과 뷰의 분리로 유지보수와 확장이 용이하다.
-개발자와 디자이너의 작업이 분리되어 분업이 편리하다.
-중,대형 프로젝트에 적합하다.

단점
-초기 구조설계에 많은 시간이 필요하므로 개발기간이 증가한다. 
-개발자의 높은 수준이 요구된다.



*Model,View,Controller란? 
Model:데이터를 가진 객체이며 파라미터로 자주 쓰인다. DB의 테이블과 대응하는 경우가 많다. 
View: UI를 담당한다. 클라이언트 측 기술인 Html,Css,Javascript 등으로 만들어진 컨테이너이다.(프레젠테이션 영역)
Controller: UI를 통한 사용자의 입력 명령에 응답하고, 데이터 흐름 제어를 담당한다.(비즈니스 로직 영역)














