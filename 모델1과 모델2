모델1과 모델2?
JSP로 구성할 수 있는 웹 어플리케이션의 아키텍쳐이다.
크게 모델1과 모델2로 나뉜다. 

모델1과 모델2의 차이점? 
모델 1은 JSP가 결과의 출력 뿐만 아니라 요청에 대한 모든 로직을 처리 
모델 2는 결과의 출력만 담당

모델1이란? 
JSP파일내에서 뷰와 컨트롤러 모두 실행되어지는 구조이다.
웹 브라우저의 요청을 JSP가 직접 처리한다.
-웹 브라우저의 요청을 받은 JSP는 자바빈즈를 사용해서 웹 브라우저가 요청한 작업을 처리하고 그 결과를 클라이언트 측에 출력한다.-
출처 :https://haloworld.tistory.com/17 <-사진보기 
JSP 페이지에 비즈니스 로직을 처리하기 위한 코드와 웹 브라우저에 결과를 출력하는 코드가 섞인다는 것을 의미한다. 
장점 
-단순한 페이지 흐름으로 인한 개발기간 단축 
-이용 용이 
-중소형 프로젝트에 적합

단점
-웹 어플리케이션이 복잡해 질수록 유지보수가 어려움 
-디자이너와 개발자간의 활발한 의사소통이 필요함

모델2란?
컨트롤러를 통해  비즈니스 로지과 뷰가 분리된 형태이다. 
JSP에서는 뷰를 담당하고, 자바 클래스에서 비즈니스 로직을 담당. 뷰는 어떠한 처리로직도 포함하지 않는다.
-모델 2방식은 웹 브라우저의 요청을 하나의 서블릿으로 받는다. 서블릿은 웹 브라우저의 요청에 알맞게 처리한 후 그 결과를 보여줄 
JSP 페이지로 포워딩한다. 포워딩을 통해 요청 흐름을 받은 JSP 페이지는 결과화면을 클라이언트에 전송한다.-


특징
모델2 구조의 특징은 웹 브라우저의 모든 요청을 단일 진입점, 즉 하나의 서블릿에서 처리한다는 점이다. 
하나의 서블릿이 웹 브라우저의 모든 요청을 받기 때문에, 서블릿은 웹 브라우저의 요청을 구분하는 방법이 필요하다 .-
서블릿은 웹 브라우저의 요청을 처리한 후 웹 브라우저에 보이게 될 응답화면을 생성할 JSP를 선택한다.


장점
-비즈니스 로직과 뷰의 분리로 유지보수와 확장이 용이하다.
-개발자와 디자이너의 작업이 분리되어 분업이 편리하다.
-중,대형 프로젝트에 적합하다.

단점
-초기 구조설계에 많은 시간이 필요하므로 개발기간이 증가한다. 
-개발자의 높은 수준이 요구된다.



*Model,View,Controller란? 
-Model:데이터를 가진 객체이며 파라미터로 자주 쓰인다. DB의 테이블과 대응하는 경우가 많다. 
   1.사용자가 편집하길 원하는 모든 데이터를 가지고 있어야한다.(디자인 정보 포함)
   2.뷰나 컨트롤러에 대해서 어떠한 정보도 알지 말아야한다.(ui 조정하는 요소 포함 금지)
   3.변경이 일어나면,변경통지에 대한 처리방법을 구현해야한다.(정보 수신 전송 처리 방법,재사용성)
-View: UI를 담당한다. 클라이언트 측 기술인 Html,Css,Javascript 등으로 만들어진 컨테이너이다.(프레젠테이션 영역)
   1.모델이 가지고 있는 정보를 따로 저장해서는 안된다.(정보저장은 view에서 이루어지면 안됨)
   2.모델이나 컨트롤러와같이 다른 구성요소들을 몰라야 된다.(뷰는 화면표시역할만)
   3.변경이 일어나면 변경통지에 대한 처리방법 구현해야한다.(사용자가 화면에 표시된 내용을 변경하게 되면 모델 변경 방법 생각)
-Controller: UI를 통한 사용자의 입력 명령에 응답하고, 데이터 흐름 제어를 담당한다.(비즈니스 로직 영역)
   1.모델이나 뷰에 대해서 알고 있어야한다.
   2. 모델이나 뷰의 변경을 모니터링 해야한다.
---------------------------------------------------------------------------------------------------------------------
MVC패턴이란? 
디자인 패턴중에 하나이며 Model,View,Contrller의 약자이다. 
하나의 어플리케이션,프로젝트를 구성할 때 그 구성요소를 세가지의 역할로 구분한 패턴이다.

사용자가 Controller를 조작하면 Controller는 model을 통해서 데이터를 가져오고 그 정보를 
바탕으로 시각적인 표현을 담당하는 View를 제어해서 사용자에게 전달하게 된다.

Process 
Model -> Updates -> View -> sees ->user ->uses ->controller -> manipulates ->Model
                                          순환


*디자인패턴이란?
프로그램이나 어떤 특정한 것을 개발하는 중에 발생했던 문제점들을 정리해서 상황에 딸
간편하게 적용해서 쓸 수 있는 것을 정리하여 특정한 "규약"을 통해 쉽게 쓸 수 있는 형태로 만든 것을 말한다. 
디자인 패턴의 장점 
상황
1) 요구사항이 수시로 변경되는 경우
 -요구 사항 변경에 따른 Source Code 변경을 최소화 할 수 있게 해준다. 
 -설계 변경 요청에 대한 유연한 대처가 가능하다.
2) 여러 사람이 같이 작업하는 팀 프로젝트 진행되는 경우 
 -범용적인 코딩 스타일을 적용할 수 있다.
 -업무 논의 및 디자인 문서를 작성할 때 상호간 의사결정에 용어로 쓰인다. 
 -개발자간의 원활한 의사소통을 할 수 있다.
 -재사용을 통한 개발 시간을 단축 시킨다.
3) 상황에 따라 인수 인계하는 경우 
 -소프트웨어 구조 파악이 용이하다.
 -직관적인 코드를 사용할 수 있다.
 -시간과 비용이 절약된다.
 
 
디자인 패턴의 단점 
 -객체 지향 설계 위주로 사용된다.
 -객체 지향 구현 위주로 사용된다.
 -초기 투자 비용이 부담 될 수 있다.




MVC패턴의 장단점
장점
사용자가 보는 페이지,데이터 처리, 2가지를 중간에서 제어하는 컨트롤 
이 3가지로 구성되는 하나의 애플리케이션을 만들면 각각 맡은 바에만 집중할 수 있다. 
서로 분리되어 각자의 역할에 집중할 수 있게끔 하여 개발을 하고 그렇게 애플리케이션을 
만든 다면 유지 보수성, 애플리케이션의 확장성, 유연성이 증가하고 중복코딩이라는 
문제점 또한 사라지게 된다. 
*유연성이란? 
클라이언트의 새로운 요구사항에 대해 최소한의 비용으로 보다 유연하게 대처할 수 있는 것을 
말한다. 










