JavaBean의 정의 
일반적인 웹 사이트는 디자이너와 프로그래머가 협력하여 개발한다. 그런데 프로그래머가 JSP페이지에 
자바 코드를 입력했을 때 디자이너 입장에서는 해석하기 어려워지고 효율 또한 매우 떨어지게 된다. 
이런 비효율적인 부분을 지원하기 위해 제공되는 기능의 형태가 자바빈이다. 자바빈은 JSP 페이지의 
디자인 부분과 로직부분을 나눔으로써 복잡한 자바코드를 줄이고 프로그램의 재사용성을 증가시킨다.





Java Bean의 규격
1.
클래스는 패키지화 하여야 한다.
2.
멤버변수는 프로퍼티(Property)라 칭한다.
3.
클래스는 필요에 따라 직렬화가 가능하다.
4.
프로퍼티의 접근자는 private이다.
5.
프로퍼티마다 getter/setter 가 존재해야 하며, 그 이름은 각각 get/set으로 시작해야 한다.
6.
위의 프로퍼티 getter/setter 메서드의 접근자는 public이어야 한다.
7.
외부에서 프로퍼티에 접근은 메서드를 통해서 접근한다.
8.
프로퍼티는 반드시 읽기/쓰기가 가능해야 하지만, 읽기 전용인 경우 getter만 정의할 수 있다.
9.
getter의 경우 파라미터가 존재하지 않아야 하고, setter의 경우 한 개 이상의 파라미터가 존재한다.
10.
프로퍼티의 형이 boolean일 경우 get 메서드 대신 is메서드를 사용해도 된다.

*JavaBean에 규약이 생긴 이유 ?
Java Bean의 목적은 여러가지 다른 오브젝트들을 하나의 오브젝트에 담기 위함이다. JavaBean의 규칙을 소프트웨어 
프로토콜이라고 생각하면 쉽다. 
*Private 필드와 Getter/Setter만으로 이루어져 있는 이유?
Encapsulation을 위함이다. 이러한 스탠다드를 지키는 클래스를 POJO(Plain Old Java Object)라고 한다. 
*기본 생성자(No-Argument)를 사용하는 이유? 
생성자에 Argumnet가 있다면 이 소프트웨어는 Argument가 몇개인지, 어떤 필드에 맵핑되는지 찾아야 한다. Argument가 없는
생성자를 반드시 만들면 오브젝트를 런타임에 생성해 주는 프로그램은 오브젝트 생성 후 getter/setter를 이용해 
값 설정으로 단순하게 목적을 달성 할 수 있다.
*왜 java.io.Serializable 인터페이스를 구현하는가? 
JavaBean에 담아서 네트워크를 통해 전송하거나, 파일/데이터베이스에 저장한다. 
메모리에 존재하는 오브젝트를 네트워크를 통해 전송하거나 파일에 저장하려면 data Stream(e.g,byte[])로
이 오브젝트를 변환시켜줘야하는데 이 변환작업을 Serialization이라고 부른다. JavaBean을 저장하거나 
전송하는 일이 많기 때문에,Serializable가 스탠다드에 포함된다.





