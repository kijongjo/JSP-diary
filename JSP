이점: 
기존의 web 표현 방식은 printwriter 객체를 초기화한 후에 객체.println("코드")를 
일일이 적용하여 사용하는 번거로움이 생겨 코드가 길어지거나 세세한 조정을 하기에 매우 힘이 들었다.
jsp는 이러한 번거로움을 줄여 java에서도 javascript 처럼 사용할 수 있도록 해준것이다. 

구조? 
선언부와 실행부로 나뉘어져 있다. <% %>를 사용한다. %를 expression이라고 부른다. <% %>안에 들어가는 코드들은 _jspServie() 안에 들어가게 된다. 
_jspService()안에는 미리 선언되어 있는 지역변수가 존재하는데 그것을 jsp 내장객체라고 부른다.

*<% %>안에 존재하는 변수 활용하기 
<%%>안에 들어가는 변수는 지역변수로 분류되기 때문에 웹페이지상에서 변수의 변화가 적용이 안된다. 
-ex)<%counter++%> <-새로고침을 눌러도 1씩 증가하는 모습이 보이지 않음. 
웹페이지 상에서 변수를 적용하기 위해서는 <%= 변수 %>를 해주어야 한다. 

ex)

<%@ page language="java" contentType="text/html; charset=UTF-8"     <-기본 jsp 형식
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<%! Long counter=1000000000000L; %>
<%//지역변수로 남아있다 그래서 웹페이지 상의 counter에 대한 값이 1씩 증가 하지않음. 
//int counter = 0;
counter++;%>
<h1>현재페이지 방문횟수<%=counter %></h1>
</body>
</html>
------------------------------------------------------------------------------------------------
선언부와 실행부
선언부와 실행부로 나뉘어져 있다. 
1)부 : 변수를 선언한다 <%!변수선언%> 
-ex)<%!    int sum = 0 ;%>
2)부 : 변수를 조합해 어떤 행위와 가공을 한다. <% 내용 %>
-ex)<% for(int i =0;i<=100;i++){sum=i+sum;}
  %>  <%=sum %> 
  
  *그런데 선언부가 실행부보다 앞에 나와도 정상적으로 실행이 되는 것을 알 수가 있다. 왜그럴까?
  jsp의 소스를 저장하게 되면 servlet으로 자동적으로 바뀌게 된다. 이러한 변화 과정에서 선언부와 
  실행부를 분류하여 위치 조정후 다시 저장하기 때문에 문제가 되지 않는다. 

*<%=변수%>의 경우 속성값으로도 넣을 수 있다.
ex)
<input type="text" name="num1" id="" value="<%=n1%>" />
----------------------------------------------------------------------------------------------------
jsp의 주석 
<%--jsp 주석 --%>를 사용한다. 
*<!--html 주석   -->과의 차이? 
jsp의 주석은 tomcat에게 보내기 때문에 개발자 창에 주석이 보이지 않는다. -html 주석은 보인다-
따라서 보안이 중요한 주석이라면 jsp주석을 사용해야만 한다. 


---------------------------------------------------------------------------------------------------


