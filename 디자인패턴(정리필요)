//개념: 디자인 패턴 (GoF?디자인 패턴에 몇가지 정리해놓은 규칙과 방법들이 있으니 찾아보자.)
//싱글톤 패턴(SingleTon Pattern)
//싱글톤 패턴의 특징 
//1.private 생성자 
//2.private static한 자기 자신의 멤버변수 
//3.자기자신의 객체를 리턴하는 static getInstance()를 가지게 된다. -getInstance이름은 바뀔 수 있지만 통상 이렇게 쓴다.-
//*SPRING에 사용되는 모든 객체는 싱글톤이다. 유념하자!
public class MakeConnection {
	// static을 해주는 이유?
	// testmain2에서 new하지 않고 makeconnection의 객체를 만들기 위함이다.
	//개념: 까먹은 개념 static -> 객체의 생성없이 호출이 가능하도록 설정
	private static MakeConnection mc;
	//상수고정해 바꾸지 못하도록 막아 놓았다.
	final static String DRIVER = "oracle.jdbc.driver.OracleDriver";
	final static String URL = "jdbc:oracle:thin:@192.168.0.35:1521:orcl";
	final static String USER = "scott";
	final static String PASSWORD = "tiger";
	Connection conn = null;
	PreparedStatement pstmt = null;
	ResultSet rs = null;
	StringBuffer sb = new StringBuffer();

	private MakeConnection() {

	}

//new를 새로 하지 않고  쓰도록 하기위한 method 설정.
	public static MakeConnection getInstance() {
		// 처음에 부르면 null이기 때문에 new를 하고 두번째 부르면 기본 값을 그냥 불러오도록 한다.
		if (mc == null) {
			mc = new MakeConnection();
		 
		}
		return mc;
	}

	public Connection getConnection() {
		//만약 conn이 null값이면 driver 로딩과 db접속을 실행하게 된다.  그렇지 않다면 이미 접속되어서 객체정보를 받은 
		//conn을 return한다.
		if (conn == null) {
			try {
				Class.forName(DRIVER);
				conn = DriverManager.getConnection(URL, USER, PASSWORD);
			} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			System.out.println("conn:" + conn);

		}

		return conn;
	}

}
